#ci.yml
name: CI - Test & Build Docker

on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      PROJECT_NAME: Streamcast
      HOST: 0.0.0.0
      PORT: 3000

      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRATION: 3600

      HLS_HOST: http://localhost
      HLS_PORT: 8080
      FRONTEND_URL: http://localhost:3030
      NODE_ENV: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER"; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Run unit tests (if present)
        run: pnpm test || echo "No unit tests found, skipping"

      - name: Run e2e tests
        run: pnpm run test:e2e

      - name: Read version from package.json
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Build Docker image
        run: |
          IMAGE=backstm:$VERSION
          docker build -t $IMAGE .
          docker save $IMAGE | gzip > backstm.tar.gz

      - name: Upload Docker image to VPS
        run: |
          scp backstm.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/backstm.tar.gz
      
      - name: Load image on remote VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
          docker load < /tmp/backstm.tar.gz
          docker tag backstm:${{ env.VERSION }} backstm:latest
          EOF


