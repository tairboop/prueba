#ci.yml
name: CI - Test & Build Docker

on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{vars.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      #PROJECT_NAME: Streamcast
      #HOST: 0.0.0.0
      #PORT: 3000
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST}}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT}}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{vars.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}

      #JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #JWT_EXPIRATION: 3600

      #HLS_HOST: http://localhost
      #HLS_PORT: 8080
      #FRONTEND_URL: http://localhost:3030
      #NODE_ENV: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER"; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Run unit tests (if present)
        run: pnpm test || echo "No unit tests found, skipping"

      - name: Run e2e tests
        run: pnpm run test:e2e

      - name: Read version from package.json
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Save version artifact
        run: echo "$VERSION" > version.txt
        env:
          VERSION: ${{env.VERSION}}

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image with version
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/backstm
          docker build -t $IMAGE:$VERSION .
          docker tag $IMAGE:$VERSION $IMAGE:latest
          docker push $IMAGE:$VERSION
          docker push $IMAGE:latest
        env:
          VERSION: ${{ env.VERSION}}

